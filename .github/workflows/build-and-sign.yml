name: Build Signed Artifacts and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build for Linux'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build for macOS'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build for Windows'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '22'

jobs:
  build-linux:
    if: github.event.inputs.build_linux == 'true'
    runs-on: ubuntu-latest
    environment: code-signing
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.electron
            ~/.electron-gyp
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Get UV hash
        id: uv-hash
        run: |
          echo "hash=$(node -e "console.log(require('./package.json').uv.linux.sha256)")" >> $GITHUB_OUTPUT

      - name: Cache UV binaries
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: assets/bin
          key: ${{ runner.os }}-uv-${{ steps.uv-hash.outputs.hash }}

      - name: Download uv
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: npm run download linux

      - name: Build application
        run: npm run publish
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 'linux-artifacts-signed'
          path: |
            dist/*.AppImage
            dist/*.appimage
            dist/*.blockmap
            dist/*.yml
            dist/*.yaml
          retention-days: 90

  build-macos:
    if: github.event.inputs.build_macos == 'true'
    runs-on: macos-latest
    environment: code-signing
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.electron
            ~/.electron-gyp
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Get UV hash
        id: uv-hash
        run: |
          echo "hash=$(node -e "console.log(require('./package.json').uv.mac.sha256)")" >> $GITHUB_OUTPUT

      - name: Cache UV binaries
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: assets/bin
          key: ${{ runner.os }}-uv-${{ steps.uv-hash.outputs.hash }}

      - name: Download uv
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: npm run download mac

      - name: Import macOS certificates
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERT_FILE_B64 }}
          p12-password: ${{ secrets.APPLE_CERT_FILE_PASSWORD }}

      - name: Build and sign application
        run: npm run publish
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 'macos-artifacts-signed'
          path: |
            dist/*.dmg
            dist/*.DMG
            dist/*.zip
            dist/*.ZIP
            dist/*.blockmap
            dist/*.yml
            dist/*.yaml
          retention-days: 90

  build-windows:
    if: github.event.inputs.build_windows == 'true'
    runs-on: windows-latest
    environment: code-signing
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_tag || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.electron
            ~/.electron-gyp
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Get UV hash
        id: uv-hash
        shell: bash
        run: |
          echo "hash=$(node -e "console.log(require('./package.json').uv.win.sha256)")" >> $GITHUB_OUTPUT

      - name: Cache UV binaries
        id: cache-uv
        uses: actions/cache@v4
        with:
          path: assets/bin
          key: ${{ runner.os }}-uv-${{ steps.uv-hash.outputs.hash }}

      - name: Download uv
        if: steps.cache-uv.outputs.cache-hit != 'true'
        run: npm run download win

      - name: Set tool paths for signing
        run: |
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash

      - name: Build and sign application
        run: npm run publish
        env:
          ENABLE_SIGNING: true
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SM_HOST: ${{ secrets.SM_HOST }}
          SM_API_KEY: ${{ secrets.SM_API_KEY }}
          SM_CLIENT_CERT_PASSWORD: ${{ secrets.SM_CLIENT_CERT_PASSWORD }}
          SM_CLIENT_CERT_FILE_B64: ${{ secrets.SM_CLIENT_CERT_FILE_B64 }}
          SM_CODE_SIGNING_CERT_SHA1_HASH: ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: 'windows-artifacts-signed'
          path: |
            dist/*.exe
            dist/*.EXE
            dist/*.blockmap
            dist/*.yml
            dist/*.yaml
          retention-days: 90
